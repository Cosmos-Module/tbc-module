syntax = "proto3";
package tbc.tbc;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "tbc/params.proto";
import "tbc/creator_coin.proto";
import "tbc/coin_all.proto";
// this line is used by starport scaffolding # 1

option go_package = "tbc/x/tbc/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tbc/tbc/params";
  }
  // Queries a CreatorCoin by index.
	rpc CreatorCoin(QueryGetCreatorCoinRequest) returns (QueryGetCreatorCoinResponse) {
		option (google.api.http).get = "/tbc/tbc/creator_coin/{index}";
	}

	// Queries a list of CreatorCoin items.
	rpc CreatorCoinAll(QueryAllCreatorCoinRequest) returns (QueryAllCreatorCoinResponse) {
		option (google.api.http).get = "/tbc/tbc/creator_coin";
	}

// Queries a list of CoinList items.
	rpc CoinList(QueryCoinListRequest) returns (QueryCoinListResponse) {
		option (google.api.http).get = "/tbc/tbc/coin_list";
	}

// Queries a list of Price items.
	rpc Price(QueryPriceRequest) returns (QueryPriceResponse) {
		option (google.api.http).get = "/tbc/tbc/price/{symbol}";
	}

// Queries a list of CoinBatch items.
	rpc CoinBatch(QueryCoinBatchRequest) returns (QueryCoinBatchResponse) {
		option (google.api.http).get = "/tbc/tbc/coin_batch/{queryList}";
	}

// Queries a list of PricePay items.
	rpc PricePay(QueryPricePayRequest) returns (QueryPricePayResponse) {
		option (google.api.http).get = "/tbc/tbc/price_pay/{coin}";
	}

// Queries a list of PriceBatch items.
	rpc PriceBatch(QueryPriceBatchRequest) returns (QueryPriceBatchResponse) {
		option (google.api.http).get = "/tbc/tbc/price_batch/{queryList}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetCreatorCoinRequest {
	  string index = 1;

}

message QueryGetCreatorCoinResponse {
	CreatorCoin creatorCoin = 1 [(gogoproto.nullable) = false];
}

message QueryAllCreatorCoinRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCreatorCoinResponse {
	repeated CreatorCoin creatorCoin = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCoinListRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryCoinListResponse {
	repeated CoinAll coinAll = 1 [(gogoproto.nullable) = false];
}

message QueryPriceRequest {
  string symbol = 1;
}

message QueryPriceResponse {
  uint64 price = 1;
}

message QueryCoinBatchRequest {
  string queryList = 1;
}

message QueryCoinBatchResponse {
	repeated CreatorCoin creatorCoin = 1 [(gogoproto.nullable) = false];
}

message QueryPricePayRequest {
  string coin = 1;
}

message QueryPricePayResponse {
  uint64 price = 1;
}

message QueryPriceBatchRequest {
  string queryList = 1;
}

message QueryPriceBatchResponse {
	repeated uint64 price = 1;
}

// this line is used by starport scaffolding # 3
